# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'dual_tab_widget.ui'
#
# Created by: PyQt5 UI code generator 5.15.10
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets, QtMultimedia
from PyQt5.QtCore import QTimer
from module_3.layout_configuration_options_ver_2 import Ui_MainWindow  as uicmain
from module_3.upload_processing_uic import Process_Model 
from module_3.manage_signal_transmission_ver2 import Ui_MainWindow as AutomationInterface
from module_3.signal_processing_pyuic5 import DataProcessSignal 
import sys
import cv2,time,numpy as np
class CameraManager:
    def __init__(self):
        self._camera_data = {}

    def register_camera(self, trigger_name, model_loader, ui):
        """Gán một camera vào hệ thống với trigger riêng."""
        self._camera_data[trigger_name] = {
            'model_loader': model_loader,
            'ui': ui
        }

    def get_camera_data(self, trigger_name):
        return self._camera_data.get(trigger_name, None)
    
    def engine_outdoor(self,image,model_loader,width_widget,height_widget):
        image_rgb = cv2.cvtColor(image, cv2.COLOR_BGR2RGB) 
        result_model = model_loader(image_rgb, size=640, conf=0.4)
        result = result_model.pandas().xyxy[0]
        result = result[result.name.isin(result_model.names)]
        result_image = np.squeeze(result_model.render())
        result_image_rgb = cv2.resize(result_image, (width_widget, height_widget), interpolation=cv2.INTER_AREA)
        flag = False
        return result_image_rgb,flag
    
    def handle_trigger_from_file(self, filepath, image_rgb):
        self.trigger_file_path = filepath
        self.image_rgb = image_rgb


    def check_trigger_once(self):
        try:
            with open(self.trigger_file_path, 'r+') as file:
                line = file.readline().strip()
                if '=' not in line:
                    return

                register, value = line.split('=')
                register = register.strip()
                value = int(value.strip())

                if value != 1:
                    return

                camera_data = self.get_camera_data(register)
                if not camera_data:
                    print(f"[x] Trigger '{register}' not registered.")
                    return

                model = camera_data['model_loader']
                t1 = time.time()
                result_image_rgb, flag = self.engine_outdoor(self.image_rgb, model, 450, 450)
                t2 = time.time()

                cv2.putText(result_image_rgb, 'RESULT: OK' if flag else 'RESULT: NG',
                            (10, 50), cv2.FONT_HERSHEY_SIMPLEX, 0.5,
                            (0, 255, 0) if flag else (0, 0, 255), 1)
                cv2.putText(result_image_rgb, f"Time: {t2 - t1:.2f}s", (10, 30),
                            cv2.FONT_HERSHEY_SIMPLEX, 0.5, (255, 255, 255), 1)

                cv2.imshow("Result", result_image_rgb)
                cv2.waitKey(1)

                file.seek(0)
                file.write(f"{register}=0\n")
                file.truncate()

        except Exception as e:
            print(f"[!] Trigger read error: {e}")
        

class Ui_MainWindow(object):

    def __init__(self,i_code,db,connect_db): 
        self.ui_child  = None
        self.i_code = i_code
        self.db = db
        self.connect_db = connect_db
        self.cursor = self.connect_db.connection.cursor()
        self.camera_manager = CameraManager()
        self.trigger_timer = QTimer()
        self.trigger_timer.setInterval(200)

    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1879, 1004)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout(self.centralwidget)
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.tabWidget = QtWidgets.QTabWidget(self.centralwidget)
        self.tabWidget.setMovable(True)
        self.tabWidget.setObjectName("tabWidget")
        self.tab = QtWidgets.QWidget()
        self.tab.setObjectName("tab")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.tab)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.tabWidget_2 = QtWidgets.QTabWidget(self.tab)
        self.tabWidget_2.setObjectName("tabWidget_2")
        self.tab_3 = QtWidgets.QWidget()
        self.tab_3.setObjectName("tab_3")
        self.tabWidget_2.addTab(self.tab_3, "")
        self.tab_4 = QtWidgets.QWidget()
        self.tab_4.setObjectName("tab_4")
        self.tabWidget_2.addTab(self.tab_4, "")
        self.horizontalLayout.addWidget(self.tabWidget_2)
        self.tabWidget.addTab(self.tab, "")
        self.tab_2 = QtWidgets.QWidget()
        self.tab_2.setObjectName("tab_2")
        self.horizontalLayout_3 = QtWidgets.QHBoxLayout(self.tab_2)
        self.horizontalLayout_3.setObjectName("horizontalLayout_3")
        self.tabWidget_3 = QtWidgets.QTabWidget(self.tab_2)
        self.tabWidget_3.setObjectName("tabWidget_3")
        self.tab_5 = QtWidgets.QWidget()
        self.tab_5.setObjectName("tab_5")
        self.tabWidget_3.addTab(self.tab_5, "")
        self.tab_6 = QtWidgets.QWidget()
        self.tab_6.setObjectName("tab_6")
        self.tabWidget_3.addTab(self.tab_6, "")
        self.horizontalLayout_3.addWidget(self.tabWidget_3)
        self.tabWidget.addTab(self.tab_2, "")
        self.horizontalLayout_2.addWidget(self.tabWidget)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1879, 21))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        self.tabWidget.setCurrentIndex(1)
        self.tabWidget_2.setCurrentIndex(0)
        self.tabWidget_3.setCurrentIndex(1)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
        self.update_database()
        self.camera_manager.handle_trigger_from_file(
                r"C:\Users\BTTB\Documents\gui_part\module_3\trigger.txt",
                cv2.imread(r"C:\Users\BTTB\Documents\gui_part\module_3\t.jpg")
            )
        self.trigger_timer.timeout.connect(self.camera_manager.check_trigger_once)
        self.trigger_timer.start()

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.tabWidget_2.setTabText(self.tabWidget_2.indexOf(self.tab_3), _translate("MainWindow", "model 1"))
        self.tabWidget_2.setTabText(self.tabWidget_2.indexOf(self.tab_4), _translate("MainWindow", "model 2"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab), _translate("MainWindow", "camera 1 "))
        self.tabWidget_3.setTabText(self.tabWidget_3.indexOf(self.tab_5), _translate("MainWindow", "model 1"))
        self.tabWidget_3.setTabText(self.tabWidget_3.indexOf(self.tab_6), _translate("MainWindow", "model 2"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_2), _translate("MainWindow", "camera 2"))

    def _select_database(self):
        self.cursor.execute("USE %s" % self.db)

    def _get_item_code_id(self, item_code):
        self.cursor.execute(
            "SELECT id FROM ITEMS_CODE WHERE name_line_code = %s",
            (item_code,)
        )
        result = self.cursor.fetchone()
        return result[0] if result else None

    def _get_camera_records(self, item_code_id):
        self.cursor.execute(
            "SELECT * FROM NUMS_CAMERA WHERE item_code_id = %s",
            (item_code_id,)
        )
        return self.cursor.fetchall()

    def _get_models_for_camera(self, camera_id):
        self.cursor.execute(
            "SELECT * FROM NUMS_MODEL WHERE camera_id = %s",
            (camera_id,)
        )
        return self.cursor.fetchall()

    def _create_camera_tab(self):
        tab = QtWidgets.QWidget()
        layout = QtWidgets.QHBoxLayout(tab)
        inner_tab = QtWidgets.QTabWidget()
        layout.addWidget(inner_tab)
        return tab

    def _create_model_tabs(self,models,camera_name,camera_id):
        for model_index, model_record in enumerate(models):
            model_number = model_index + 1
            new_tab = QtWidgets.QMainWindow()
            self.ui_child = uicmain()
            self.ui_child.setupUi(new_tab)
            self.processor = Process_Model(self.ui_child)
            self.processor.assign_values(model_number, camera_name, self.i_code)
            self.ui_instances[(camera_name, model_number)] = self.ui_child
            self.processor.load_parameter_injection_safe(camera_id, model_number,self.cursor,self.connect_db,self.tabWidget,self.ui_instances)
            self.camera_manager.register_camera('DM1000', self.processor.model_loader, self.ui_child)
            self.ui_child.pushButton.clicked.connect(lambda _,unit=self.processor:unit.browse_file())
            self.ui_child.pushButton_2.clicked.connect(lambda _,unit=self.processor:unit.load_model())
            self.ui_child.pushButton_6.clicked.connect(lambda _,unit=self.processor:unit.save_values_injection_safe(self.cursor, self.connect_db))
            self.ui_child.pushButton_21.clicked.connect(lambda _,unit=self.processor:unit.browse_file_detect())
            self.ui_child.pushButton_22.clicked.connect(lambda _,unit=self.processor:unit.detect_img())
            self.ui_child.pushButton_7.clicked.connect(lambda _,unit=self.ui_child:unit.toggle_lock())
            self.ui_child.pushButton_5.clicked.connect(lambda _,unit=self.processor:unit.load_data_injection_safe())
            # self.ui_child.pushButton_9.clicked.connect(lambda _,unit=self.camera_manager:unit.handle_trigger_from_file(r"C:\Users\BTTB\Documents\gui_part\module_3\trigger.txt", cv2.imread(r"C:\Users\BTTB\Documents\gui_part\module_3\t.jpg")))
            self.tabWidget_2.addTab(new_tab, f"Model {model_number}")
            self.product_code_forms.append(new_tab)
        

    def update_database(self):
        self.ui_instances = {}
        self.tabWidget_2.clear()
        self.tabWidget.clear()
        self.product_code_forms = []
        self._select_database()
        item_code_id = self._get_item_code_id(self.i_code)
        if not item_code_id:
            return
        camera_records = self._get_camera_records(item_code_id)
        for index, record in enumerate(camera_records):
            camera_id, camera_name = record[0], record[1]
            tab = self._create_camera_tab()
            self.tabWidget.addTab(tab, f"Camera {camera_name}")
            self.tabWidget_2 = tab.findChild(QtWidgets.QTabWidget)
            models = self._get_models_for_camera(camera_id)
            self._create_model_tabs(models,camera_name,camera_id)
            AutomationInterface_t = QtWidgets.QMainWindow()
            self.Automation = AutomationInterface()
            _translate = QtCore.QCoreApplication.translate
            self.Automation.setupUi(AutomationInterface_t)
            self.tabWidget_2.addTab(AutomationInterface_t, f"Automation")
            self.DataProcessSignal = DataProcessSignal(self.Automation)
            self.Automation.comboBox_camera.setItemText(0, _translate("MainWindow", str(camera_name)))
            self.Automation.comboBox_n_model.setItemText(0, _translate("MainWindow", str(len(models))))
            self.Automation.comboBox_Itemcode.setItemText(0, _translate("MainWindow", str(self.i_code)))
            self.DataProcessSignal.load_values_from_db(self.cursor,camera_id)
            self.Automation.pushButton_apply_signal.clicked.connect(lambda _,unit=self.DataProcessSignal:unit.save_values_signal(self.cursor, self.connect_db, camera_id))
            self.product_code_forms.append(AutomationInterface_t)

from PyQt5 import QtWidgets, QtCore

class intermediate_layer:
    def __init__(self, i_code, db, connect_db):
        self.i_code = i_code
        self.db = db
        self.connect_db = connect_db
        self.MainWindow = QtWidgets.QMainWindow()
        ui = Ui_MainWindow(self.i_code, self.db, self.connect_db)
        ui.setupUi(self.MainWindow)
        self.show_window()

    def show_window(self):
        self.MainWindow.showMaximized()
        self.MainWindow.raise_()
        self.MainWindow.activateWindow()