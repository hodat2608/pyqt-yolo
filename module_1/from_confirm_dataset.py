# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'from_confirm_dataset.ui'
#
# Created by: PyQt5 UI code generator 5.15.10
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

from PyQt5.QtWidgets import (QApplication, QMainWindow, QWidget, QLabel, QLineEdit, 
                             QVBoxLayout, QHBoxLayout, QGridLayout, QPushButton, 
                             QFrame, QComboBox, QScrollArea, QMessageBox, QSpinBox,
                             QTabWidget, QTableWidget, QTableWidgetItem, QHeaderView,
                             QGroupBox)
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QMessageBox
from PyQt5.QtGui import QFont, QIcon, QPixmap
class Ui_MainWindow(object):
    
    def __init__(self,ui):
        self.ui = ui
        self.i = False
        self.list_item_code={}

    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(878, 718)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.centralwidget)
        self.verticalLayout.setObjectName("verticalLayout")
        self.label = QtWidgets.QLabel(self.centralwidget)
        font = QtGui.QFont()
        font.setFamily("Malgun Gothic")
        font.setPointSize(22)
        font.setBold(True)
        font.setWeight(75)
        self.label.setFont(font)
        self.label.setAlignment(QtCore.Qt.AlignCenter)
        self.label.setObjectName("label")
        self.verticalLayout.addWidget(self.label)
        self.tab_certain = QtWidgets.QTabWidget(self.centralwidget)
        self.tab_certain.setMaximumSize(QtCore.QSize(16777215, 580))
        font = QtGui.QFont()
        font.setFamily("Malgun Gothic")
        font.setPointSize(9)
        font.setBold(False)
        font.setWeight(50)
        self.tab_certain.setFont(font)
        self.tab_certain.setObjectName("tab_certain")
        self.verticalLayout.addWidget(self.tab_certain)
        self.frame_button = QtWidgets.QFrame(self.centralwidget)
        self.frame_button.setMaximumSize(QtCore.QSize(300, 200))
        font = QtGui.QFont()
        font.setFamily("Malgun Gothic")
        font.setPointSize(9)
        font.setBold(False)
        font.setWeight(50)
        self.frame_button.setFont(font)
        self.frame_button.setLayoutDirection(QtCore.Qt.RightToLeft)
        self.frame_button.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_button.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_button.setObjectName("frame_button")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.frame_button)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.cancel_btn = QtWidgets.QPushButton(self.frame_button)
        font = QtGui.QFont()
        font.setFamily("Malgun Gothic")
        font.setPointSize(9)
        font.setBold(False)
        font.setWeight(50)
        self.cancel_btn.setFont(font)
        self.cancel_btn.setObjectName("cancel_btn")
        self.horizontalLayout.addWidget(self.cancel_btn)
        self.confirm_btn = QtWidgets.QPushButton(self.frame_button)
        font = QtGui.QFont()
        font.setFamily("Malgun Gothic")
        font.setPointSize(9)
        font.setBold(False)
        font.setWeight(50)
        self.confirm_btn.setFont(font)
        self.confirm_btn.setObjectName("confirm_btn")
        self.horizontalLayout.addWidget(self.confirm_btn)
        self.verticalLayout.addWidget(self.frame_button)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 878, 21))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        self.tab_certain.setCurrentIndex(0)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        self._set_text() 

    def retranslateUi(self, MainWindow):
        self._translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(self._translate("MainWindow", "MainWindow"))
        self.label.setText(self._translate("MainWindow", f"THÔNG TIN MÁY:{self.ui.lineEdit_name_devic.text()}"))
        self.cancel_btn.setText(self._translate("MainWindow", "Cancel"))
        self.confirm_btn.setText(self._translate("MainWindow", "Xác nhận"))

    def _set_text(self):
        if self.list_item_code == None:
            QMessageBox.warning(None, "Thông báo", "Vui lòng lưu cấu hình trước khi xem trước!")
            return
        self.label.setText(self._translate("MainWindow", f"THÔNG TIN CẤU HÌNH MÁY:{self.ui.lineEdit_name_devic.text()}"))
        for device_name, device_data in self.list_item_code.items():
            product_tab = QtWidgets.QWidget()
            product_layout = QtWidgets.QVBoxLayout(product_tab)
            product_title = QtWidgets.QLabel(f"Mã hàng: {device_name}")
            font = QtGui.QFont()
            font.setFamily("Arial")
            font.setPointSize(12)
            font.setBold(True)
            product_title.setFont(font)
            product_layout.addWidget(product_title)
            
            table = QtWidgets.QTableWidget()
            camera_list = device_data.get("camera_tabs", [])
            table.setRowCount(len(camera_list))
            table.setColumnCount(6)
            table.setHorizontalHeaderLabels(["No.", "Camera", "Serial", "Địa chỉ IP", "Cổng kết nối", "Số lượng model"])
            
            for i in range(table.columnCount()):
                table.horizontalHeader().setSectionResizeMode(i, QtWidgets.QHeaderView.ResizeMode.Stretch)
            table.verticalHeader().setVisible(False)
            
            for row, camera_data in enumerate(camera_list):
                table.setItem(row, 0, QtWidgets.QTableWidgetItem(f'Camera {str(row + 1)}'))
                table.setItem(row, 1, QtWidgets.QTableWidgetItem(camera_data.get("camera_type", "N/A")))
                table.setItem(row, 2, QtWidgets.QTableWidgetItem(camera_data.get("serial", "N/A")))
                table.setItem(row, 3, QtWidgets.QTableWidgetItem(camera_data.get("ip_address", "N/A")))
                table.setItem(row, 4, QtWidgets.QTableWidgetItem(camera_data.get("port", "N/A")))
                table.setItem(row, 5, QtWidgets.QTableWidgetItem(str(camera_data.get("model_count", "N/A"))))
            
            product_layout.addWidget(table)
            self.tab_certain.addTab(product_tab, device_name)

    def save_config(self):
        self.save_data()
        self._set_text()
        self.i = True

    def save_data(self):
        self.list_item_code = {} 
        if not self.ui.lineEdit_name_devic.text():
            QMessageBox.warning(None, "Thông báo", "Vui lòng nhập tên máy!")
            return
        
        if not self.ui.tab_itemcode_1.lineEdit_name_itemcod.text():
            QMessageBox.warning(None, "Thông báo", "Vui lòng nhập tên mã hàng!")
            return
        
        for form in self.ui.tab_uis:
            product_data = form.take_data()
            self.list_item_code[product_data["product_codes"]] = product_data["camera_tabs"]
            if product_data["product_codes"]: 
                self.list_item_code[product_data["product_codes"]] = {
                    "device_name": self.ui.lineEdit_name_devic.text(),
                    "camera_tabs": product_data["camera_tabs"]
                }        
        QMessageBox.information(None, "Thông báo", "Lưu thông tin thành công!")

    def view_data_from_ui(self):
        if not self.i:
            QMessageBox.warning(None, "Thông báo", "Vui lòng lưu cấu hình trước khi xem trước!")
            return
        self.i = False
        self.data_window = QMainWindow()
        self.data_window.setWindowTitle("Thông tin chi tiết")
        self.data_window.setMinimumSize(878, 718)
        
        central_widget = QWidget()
        layout = QVBoxLayout(central_widget)
   
        machine_info = QLabel(f"Thông tin máy: {self.ui.lineEdit_name_devic.text()}")
        machine_info.setFont(QFont("Arial", 14, QFont.Bold))
        machine_info.setAlignment(Qt.AlignCenter)
        layout.addWidget(machine_info)
        tab_widget = QTabWidget()
        
        for i, form in enumerate(self.ui.tab_uis):
            product_data = form.take_data()
            if product_data['product_codes'] == "":
                QMessageBox.information(None, "Thông báo", "Không có item code được chọn!")
                return
            else:
                product_tab = QWidget()
                product_layout = QVBoxLayout(product_tab)
                product_title = QLabel(f"Mã hàng: {product_data['product_codes']}")
                product_title.setFont(QFont("Arial", 12, QFont.Bold))
                product_layout.addWidget(product_title)
                table = QTableWidget()
                table.setRowCount(len(product_data["camera_tabs"]))
                table.setColumnCount(6)
                table.setHorizontalHeaderLabels(["No.","Camera", "Serial", "Địa chỉ IP", "Cổng kết nối", "Số lượng model"])
                for i in range(table.columnCount()):
                    table.horizontalHeader().setSectionResizeMode(i, QHeaderView.Stretch)
                table.verticalHeader().setVisible(False)
                table.setGeometry(QtCore.QRect(10, 10, 1181, 951))
                for row, camera_data in enumerate(product_data["camera_tabs"]):
                    table.setItem(row, 0, QTableWidgetItem(f'Camera {str(row + 1)}'))
                    table.setItem(row, 1, QTableWidgetItem(camera_data["camera_type"]))
                    table.setItem(row, 2, QTableWidgetItem(camera_data["serial"]))
                    table.setItem(row, 3, QTableWidgetItem(camera_data["ip_address"]))
                    table.setItem(row, 4, QTableWidgetItem(camera_data["port"]))
                    table.setItem(row, 5, QTableWidgetItem(str((camera_data["model_count"]))))
                product_layout.addWidget(table)
                tab_widget.addTab(product_tab, product_data["product_codes"])
            layout.addWidget(tab_widget)
        self.confirm_insert = QPushButton("Xác nhận")
        close_button = QPushButton("Close")
        close_button.clicked.connect(self.data_window.close)
        layout.addWidget(close_button, alignment=Qt.AlignRight)
        layout.addWidget(self.confirm_insert, alignment=Qt.AlignRight)
        self.data_window.setCentralWidget(central_widget)
        self.data_window.show()


    def clear_data(self):
        reply = QMessageBox.question(
            None, "Xác nhận", "Bạn có chắc muốn xóa tất cả dữ liệu?",
            QMessageBox.Yes | QMessageBox.No, QMessageBox.No
        )
        if reply == QMessageBox.Yes:
            self.ui.lineEdit_name_devic.clear()
            self.ui.spinBox_num_itemcode.setValue(1)
            self.ui.update_quanty_codes()
            QMessageBox.information(None, "Thông báo", "Đã xóa tất cả dữ liệu!")

